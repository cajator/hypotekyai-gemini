// netlify/functions/chat.js
// Logika z≈Øst√°v√° siln√°, ale bude vol√°na m√©nƒõ ƒçasto pro lep≈°√≠ v√Ωkon.

function createSystemPrompt(userMessage, context) {
    const hasContext = context && context.calculation && context.calculation.selectedOffer;
    
    const contextData = hasContext ? {
        loanAmount: context.formData?.loanAmount,
        propertyValue: context.formData?.propertyValue,
        loanTerm: context.formData?.loanTerm,
        fixation: context.formData?.fixation,
        income: context.formData?.income,
        monthlyPayment: context.calculation?.selectedOffer?.monthlyPayment,
        rate: context.calculation?.selectedOffer?.rate,
        totalScore: context.calculation?.approvability?.total,
        ltv: context.calculation?.approvability?.ltv,
        dsti: context.calculation?.selectedOffer?.dsti,
    } : null;

    let prompt = `Jsi PREMIUM hypoteƒçn√≠ strat√©g s AI. Tv≈Øj c√≠l je vytvo≈ôit pro klienta DLOUHODOBOU STRATEGII. Buƒè struƒçn√Ω, ale vƒõcn√Ω. V≈ædy pou≈æ√≠vej konkr√©tn√≠ ƒç√≠sla.

    KL√çƒåOV√â PRINCIPY:
    1. V≈ΩDY konkr√©tn√≠ ƒç√≠sla (ne "m≈Ø≈æe", ale "u≈°et≈ô√≠te 127 000 Kƒç").
    2. SC√âN√Å≈òE "co kdyby" (ztr√°ta pr√°ce, r≈Øst sazeb).
    3. SROVN√ÅN√ç alternativ (refinancov√°n√≠ vs. spl√°cen√≠).
    4. V≈ædy nab√≠dni pomoc experta pro realizaci.
    5. Nepozdravuj, jdi rovnou k vƒõci.

    ${hasContext ? `
    AKTU√ÅLN√ç SITUACE KLIENTA (pokud je relevantn√≠ k dotazu):
    - Hypot√©ka: ${contextData.loanAmount?.toLocaleString('cs-CZ')} Kƒç na ${contextData.loanTerm} let
    - Spl√°tka: ${contextData.monthlyPayment?.toLocaleString('cs-CZ')} Kƒç (${contextData.rate}% p.a.)
    - P≈ô√≠jem: ${contextData.income?.toLocaleString('cs-CZ')} Kƒç/mƒõs
    - Sk√≥re bonity: ${contextData.totalScore}% (LTV: ${contextData.ltv}%)
    ` : 'Klient zat√≠m nem√° spoƒç√≠tanou hypot√©ku. Nejd≈ô√≠ve ho odka≈æ na kalkulaƒçku na webu, pokud se pt√° na konkr√©tn√≠ ƒç√≠sla.'}

    DOTAZ U≈ΩIVATELE: "${userMessage}"

    Odpovƒõz struƒçnƒõ, maxim√°lnƒõ na 150 slov, ale s vysokou informaƒçn√≠ hodnotou. Pou≈æ√≠vej **tuƒçn√© p√≠smo** pro d≈Øle≈æit√© term√≠ny a ƒç√≠sla.`;
    
    // Zjednodu≈°en√° logika pro specializovan√© anal√Ωzy - AI si porad√≠ s obecn√Ωm promptem.
    if (userMessage.toLowerCase().match(/co kdyby|rizik|zvl√°dnu|probl√©m/)) {
        prompt += "\n\nSPECI√ÅLN√ç INSTRUKCE: Zamƒõ≈ô se na STRESS TEST. Vytvo≈ô 2-3 konkr√©tn√≠ negativn√≠ sc√©n√°≈ôe (ztr√°ta p≈ô√≠jmu, r≈Øst sazeb) a uka≈æ dopad v ƒç√≠slech. Navrhni akƒçn√≠ pl√°n (rezerva, poji≈°tƒõn√≠)."
    }
    
    if (userMessage.toLowerCase().match(/refinanc|lep≈°√≠.*nab√≠dka|u≈°et≈ôit/)) {
        prompt += "\n\nSPECI√ÅLN√ç INSTRUKCE: Zamƒõ≈ô se na REFINANCOV√ÅN√ç. Porovnej souƒçasn√Ω stav s potenci√°ln√≠ tr≈æn√≠ nab√≠dkou. Vypoƒç√≠tej mƒõs√≠ƒçn√≠, roƒçn√≠ a celkovou √∫sporu. Navrhni strategii (vyjedn√°v√°n√≠ vs. zmƒõna banky)."
    }
    
    if (userMessage.toLowerCase().match(/investov|spl√°cet|co.*s.*penƒõzi/)) {
         prompt += "\n\nSPECI√ÅLN√ç INSTRUKCE: Zamƒõ≈ô se na srovn√°n√≠ INVESTICE vs. SPL√ÅCEN√ç. Matematicky porovnej v√Ωnos z investice (cca 7% p.a.) s √∫sporou na √∫roc√≠ch z hypot√©ky. Navrhni vyv√°≈æenou strategii 50/50."
    }

    return prompt;
}

const fetch = require('node-fetch');

exports.handler = async (event) => {
    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 204, headers: { 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Headers': 'Content-Type', 'Access-Control-Allow-Methods': 'POST' } };
    }
    const headers = { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' };

    try {
        const { message, context } = JSON.parse(event.body);
        const apiKey = process.env.GEMINI_API_KEY;

        if (!apiKey) throw new Error('Chyb√≠ GEMINI_API_KEY.');
        
        // Zde m≈Ø≈æe b√Ωt fallback pro jednoduch√© dotazy, pokud by je frontend propustil
        if (message.toLowerCase().match(/kontakt|specialista|mluvit|poradit|sch≈Øzka/)) {
            return { statusCode: 200, headers, body: JSON.stringify({ tool: 'showLeadForm', response: "üìû V√Ωbornƒõ! P≈ôipoj√≠m v√°s k na≈°emu PREMIUM t√Ωmu. Otev√≠r√°m formul√°≈ô..." }) };
        }

        const prompt = createSystemPrompt(message, context);
        const modelName = "gemini-1.5-flash-latest"; 
        const url = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${apiKey}`;

        const apiResponse = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
        });

        if (!apiResponse.ok) {
            const errorBody = await apiResponse.text();
            console.error('API Error Body:', errorBody);
            throw new Error(`Chyba API: ${apiResponse.statusText}`);
        }

        const data = await apiResponse.json();
        const responseText = data?.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!responseText) throw new Error("AI nevr√°tila ≈æ√°dn√Ω text.");
        
        return { statusCode: 200, headers, body: JSON.stringify({ response: responseText.trim() }) };

    } catch (error) {
        console.error('Chyba ve funkci chat.js:', error);
        return { statusCode: 500, headers, body: JSON.stringify({ error: `Do≈°lo k chybƒõ: ${error.message}` }) };
    }
};