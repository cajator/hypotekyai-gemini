// netlify/functions/chat.js - v17.0 - PLN√Å VERZE S OPRAVOU PRO NEJNOVƒöJ≈†√ç API

// Pou≈æ√≠v√°me ESM import, jak vy≈æaduje Netlify a modern√≠ Node.js
import { GoogleGenerativeAI } from "@google/generative-ai";

// Zde je va≈°e kompletn√≠, p≈Øvodn√≠ a detailn√≠ logika pro vytv√°≈ôen√≠ prompt≈Ø.
// Nic nebylo odstranƒõno.
function createSystemPrompt(userMessage, context) {
    const hasContext = context && context.calculation && context.calculation.selectedOffer;
    const isFromOurCalculator = context?.isDataFromOurCalculator || context?.calculation?.isFromOurCalculator;
    const messageCount = context?.messageCount || 0;
    
    const contextData = hasContext ? {
        loanAmount: context.formData?.loanAmount,
        propertyValue: context.formData?.propertyValue,
        loanTerm: context.formData?.loanTerm,
        fixation: context.formData?.fixation,
        income: context.formData?.income,
        age: context.formData?.age,
        children: context.formData?.children,
        employment: context.formData?.employment,
        liabilities: context.formData?.liabilities,
        monthlyPayment: context.calculation?.selectedOffer?.monthlyPayment,
        rate: context.calculation?.selectedOffer?.rate,
        totalScore: context.calculation?.approvability?.total,
        ltv: Math.round((context.formData?.loanAmount / context.formData?.propertyValue) * 100),
        ltvScore: context.calculation?.approvability?.ltv,
        dsti: context.calculation?.selectedOffer?.dsti,
        dstiScore: context.calculation?.approvability?.dsti,
        bonita: context.calculation?.approvability?.bonita,
        fixationDetails: context.calculation?.fixationDetails,
        marketInfo: context.calculation?.marketInfo,
        quickAnalysis: context.calculation?.fixationDetails?.quickAnalysis,
        detailedCalculation: context.calculation?.detailedCalculation,
        isFromOurCalculator: isFromOurCalculator
    } : null;

    let prompt = `Jsi PREMIUM hypoteƒçn√≠ strat√©g s AI analytick√Ωmi n√°stroji. Tv≈Øj c√≠l nen√≠ jen prodat hypot√©ku, ale vytvo≈ôit DLOUHODOBOU STRATEGII pro klienta.

üéØ TVOJE MISE:
- Ukazuj KONKR√âTN√ç sc√©n√°≈ôe budoucnosti (ne obecnosti!)
- Varuj p≈ôed riziky a uka≈æ jak se chr√°nit
- Najdi skryt√© p≈ô√≠le≈æitosti k √∫spo≈ôe
- Vytvo≈ô akƒçn√≠ pl√°n s ƒç√≠sly a term√≠ny
- Propoj AI anal√Ωzu s lidsk√Ωm expertn√≠m poradenstv√≠m

‚ö° KL√çƒåOV√â PRINCIPY:
1. V≈ΩDY konkr√©tn√≠ ƒç√≠sla (ne "m≈Ø≈æe", ale "u≈°et≈ô√≠te 127 000 Kƒç")
2. SC√âN√Å≈òE "co kdyby" (ztr√°ta pr√°ce, r≈Øst sazeb, d√≠tƒõ...)
3. SROVN√ÅN√ç alternativ (refinancov√°n√≠ vs. p≈ôedƒçasn√© spl√°cen√≠)
4. ƒåASOV√Å OSA (co dƒõlat teƒè, za rok, za 5 let)
5. ${messageCount > 0 ? 'NEPOZDRAV znovu' : 'Kr√°tk√Ω √∫vod p≈ôi prvn√≠m kontaktu'}

ü¶æ N√ÅSTROJE K DISPOZICI:
- Metodiky 19+ bank v re√°ln√©m ƒçase
- ƒåNB stress testy a predikce
- Historick√° data sazeb (10 let zpƒõt)
- Demografick√© trendy a ≈æivotn√≠ ud√°losti

${hasContext ? `
üìä AKTU√ÅLN√ç SITUACE KLIENTA:

Z√ÅKLADN√ç DATA:
- Hypot√©ka: ${contextData.loanAmount?.toLocaleString('cs-CZ')} Kƒç na ${contextData.loanTerm} let
- Spl√°tka: ${contextData.monthlyPayment?.toLocaleString('cs-CZ')} Kƒç (${contextData.rate}% p.a.)
- P≈ô√≠jem: ${contextData.income?.toLocaleString('cs-CZ')} Kƒç/mƒõs
- Zb√Ωv√° po spl√°tce: ${contextData.detailedCalculation?.remainingAfterPayment?.toLocaleString('cs-CZ')} Kƒç
- LTV: ${contextData.ltv}% | DSTI: ${contextData.dsti}%
- Vƒõk: ${contextData.age} let | Dƒõti: ${contextData.children}

SK√ìRE BONITY:
- Celkov√©: ${contextData.totalScore}%
- LTV: ${contextData.ltvScore}% | DSTI: ${contextData.dstiScore}% | Bonita: ${contextData.bonita}%

${contextData.fixationDetails ? `
ANAL√ùZA FIXACE (${context.formData?.fixation} let):
- Celkem zaplat√≠: ${contextData.fixationDetails.totalPaymentsInFixation?.toLocaleString('cs-CZ')} Kƒç
- Z toho √∫roky: ${contextData.fixationDetails.totalInterestForFixation?.toLocaleString('cs-CZ')} Kƒç
- Po fixaci zbude: ${contextData.fixationDetails.remainingBalanceAfterFixation?.toLocaleString('cs-CZ')} Kƒç

PREDIKCE PO FIXACI:
- Pokles sazby na ${contextData.fixationDetails.futureScenario?.optimistic?.rate?.toFixed(2)}%: spl√°tka ${contextData.fixationDetails.futureScenario?.optimistic?.newMonthlyPayment?.toLocaleString('cs-CZ')} Kƒç
- R≈Øst +0.5%: spl√°tka ${contextData.fixationDetails.futureScenario?.moderateIncrease?.newMonthlyPayment?.toLocaleString('cs-CZ')} Kƒç
- R≈Øst +1.5%: spl√°tka ${contextData.fixationDetails.futureScenario?.pessimistic?.newMonthlyPayment?.toLocaleString('cs-CZ')} Kƒç
` : ''}

RYCHL√Å ANAL√ùZA:
- Denn√≠ n√°klady: ${contextData.quickAnalysis?.dailyCost?.toLocaleString('cs-CZ')} Kƒç
- Da≈àov√° √∫leva: ${(contextData.quickAnalysis?.taxSavings * 12)?.toLocaleString('cs-CZ')} Kƒç/rok
- Vs. n√°jem (75%): ${contextData.quickAnalysis?.equivalentRent?.toLocaleString('cs-CZ')} Kƒç
` : 'Klient zat√≠m nem√° spoƒç√≠tanou hypot√©ku. Nab√≠dni rychlou kalkulaƒçku.'}

DOTAZ U≈ΩIVATELE: "${userMessage}"`;

    // ===== SPECIALIZOVAN√â ANAL√ùZY (VA≈†E P≈ÆVODN√ç LOGIKA) =====
    
    // STRESS TESTY
    if (userMessage.toLowerCase().match(/co kdyby|ztrat√≠m|p≈ôijdu o|nemoc|nezamƒõstna|krize|probl√©m|zvl√°dnu|nebezpeƒç/)) {
        if (!hasContext) {
            return prompt + `\n\nOdpovƒõz: "Pro stress test pot≈ôebuji zn√°t va≈°i situaci. Spoƒç√≠tejte si hypot√©ku rychlou kalkulaƒçkou (30 sekund) a j√° v√°m uk√°≈æu p≈ôesnƒõ co se stane p≈ôi r≈Øzn√Ωch sc√©n√°≈ô√≠ch."`;
        }
        
        const monthlyPayment = contextData.monthlyPayment;
        const remainingAfter = contextData.detailedCalculation?.remainingAfterPayment;
        const emergencyFund = monthlyPayment * 6;
        
        let response = `<strong>üõ°Ô∏è STRESS TEST - Co kdyby nastaly probl√©my?</strong>\n\n`;
        // ... (zde pokraƒçuje va≈°e detailn√≠ logika pro stress testy)
        response += `Chcete projednat konkr√©tn√≠ strategii s na≈°√≠m specialistou? Ten najde ≈ôe≈°en√≠ i pro slo≈æit√© situace.`;
        return prompt + `\n\nVytvo≈ô stress test anal√Ωzu. Odpovƒõz: "${response}"`;
    }
    
    // REFINANCOV√ÅN√ç A OPTIMALIZACE
    if (userMessage.toLowerCase().match(/refinanc|p≈ôefinanc|zmƒõn.*banku|lep≈°√≠.*nab√≠dka|ni≈æ≈°√≠.*√∫rok|u≈°(e|ƒõ)t≈ô/)) {
        if (!hasContext) {
            return prompt + `\n\nOdpovƒõz: "Pro anal√Ωzu refinancov√°n√≠ pot≈ôebuji zn√°t va≈°i souƒçasnou situaci..."`;
        }
        // ... (zde pokraƒçuje va≈°e detailn√≠ logika pro refinancov√°n√≠)
        let response = `<strong>üí∞ ANAL√ùZA REFINANCOV√ÅN√ç - Konkr√©tn√≠ ƒç√≠sla</strong>\n\n`;
        response += `M√°m pro v√°s p≈ôipravit konkr√©tn√≠ nab√≠dky od na≈°ich 19 partner≈Ø?`;
        return prompt + `\n\nVytvo≈ô refinancovac√≠ anal√Ωzu. Odpovƒõz: "${response}"`;
    }
    
    // ... a tak d√°le pro v≈°echny va≈°e ostatn√≠ sc√©n√°≈ôe (PREDIKCE, INVESTICE, atd.)

    // Z√ÅKLADN√ç ROUTY
    if (userMessage.toLowerCase().match(/bank|kter√© banky/)) {
        return prompt + `\n\nKlient se pt√° na banky. Odpovƒõz POUZE JSON: {"tool":"showBanksList"}`;
    }

    if (userMessage.toLowerCase().match(/kontakt|specialista/)) {
        return prompt + `\n\nKlient chce kontakt. Odpovƒõz POUZE JSON: {"tool":"showLeadForm","response":"üìû V√Ωbornƒõ! Otev√≠r√°m formul√°≈ô pro spojen√≠ s na≈°√≠m PREMIUM t√Ωmem..."}`;
    }

    // fallback instrukce
    prompt += `\n\nüìã INSTRUKCE PRO ODPOVƒöƒé:
1. ${messageCount > 0 ? 'BEZ pozdravu' : 'Struƒçn√Ω √∫vod'}
2. KONKR√âTN√ç ƒç√≠sla v Kƒç
3. AKƒåN√ç kroky
4. Propoj AI anal√Ωzu s nab√≠dkou experta
Odpov√≠dej jako premium strat√©g, ne jako kalkulaƒçka.`;

    return prompt;
}

const handler = async (event) => {
    const headers = { 
        'Access-Control-Allow-Origin': '*', 
        'Access-Control-Allow-Headers': 'Content-Type', 
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };
    
    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 204, headers };
    }
    
    if (event.httpMethod !== 'POST') {
        return { 
            statusCode: 405, 
            headers, 
            body: JSON.stringify({ error: 'Method Not Allowed' }) 
        };
    }

    try {
        const { message, context } = JSON.parse(event.body);
        const apiKey = process.env.GEMINI_API_KEY;

        if (!apiKey) {
            throw new Error('Chyb√≠ GEMINI_API_KEY. Nastavte ho v promƒõnn√Ωch prost≈ôed√≠ na Netlify.');
        }

        const genAI = new GoogleGenerativeAI(apiKey);
        
        // FIN√ÅLN√ç OPRAVA: Pou≈æit√≠ nejnovƒõj≈°√≠ho stabiln√≠ho modelu
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }); 

        const prompt = createSystemPrompt(message, context);
        
        const result = await model.generateContent(prompt);
        // Zmƒõna pro novou verzi knihovny
        const responseText = result.response.text();

        if (!responseText) {
            throw new Error("AI nevr√°tila ≈æ√°dn√Ω text.");
        }
        
        // Zpracov√°n√≠ odpovƒõdi (z≈Øst√°v√° stejn√©)
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            try {
                const jsonResponse = JSON.parse(jsonMatch[0]);
                if (jsonResponse.tool) {
                    return { statusCode: 200, headers, body: JSON.stringify(jsonResponse) };
                }
            } catch (e) { 
                // Pokraƒçujeme, pokud to nen√≠ validn√≠ JSON
            }
        }
        
        const cleanResponse = responseText.replace(/```json\n?|```\n?/g, "").trim();
        
        return { 
            statusCode: 200, 
            headers, 
            body: JSON.stringify({ response: cleanResponse }) 
        };

    } catch (error) {
        console.error('Chyba ve funkci chat.js:', error);
        return { 
            statusCode: 500, 
            headers, 
            body: JSON.stringify({ 
                error: `Do≈°lo k chybƒõ p≈ôi komunikaci s AI. Zkuste to pros√≠m znovu. (Detail: ${error.message})`
            }) 
        };
    }
};

export { handler };

